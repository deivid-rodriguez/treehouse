# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `saxerator` gem.
# Please instead update this file by running `bin/tapioca gem saxerator`.

# source://saxerator//lib/saxerator/version.rb#1
module Saxerator
  extend ::Saxerator

  # @yield [config]
  #
  # source://saxerator//lib/saxerator.rb#31
  def parser(xml); end
end

# source://saxerator//lib/saxerator/builder.rb#2
module Saxerator::Builder
  extend ::Saxerator::Builder

  # source://saxerator//lib/saxerator/builder.rb#13
  def camel_case(str); end

  # source://saxerator//lib/saxerator/builder.rb#9
  def to_class(type); end

  # @return [Boolean]
  #
  # source://saxerator//lib/saxerator/builder.rb#5
  def valid?(type); end
end

# source://saxerator//lib/saxerator/builder/array_element.rb#5
class Saxerator::Builder::ArrayElement
  # @return [ArrayElement] a new instance of ArrayElement
  #
  # source://saxerator//lib/saxerator/builder/array_element.rb#8
  def initialize(arr = T.unsafe(nil), name = T.unsafe(nil), attributes = T.unsafe(nil)); end

  # Returns the value of attribute attributes.
  #
  # source://saxerator//lib/saxerator/builder/array_element.rb#6
  def attributes; end

  # Sets the attribute attributes
  #
  # @param value the value to set the attribute attributes to.
  #
  # source://saxerator//lib/saxerator/builder/array_element.rb#6
  def attributes=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://saxerator//lib/saxerator/builder/array_element.rb#6
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://saxerator//lib/saxerator/builder/array_element.rb#6
  def name=(_arg0); end

  # source://saxerator//lib/saxerator/builder/array_element.rb#14
  def to_a; end
end

# source://saxerator//lib/saxerator/builder/hash_builder.rb#3
class Saxerator::Builder::HashBuilder
  # @return [HashBuilder] a new instance of HashBuilder
  #
  # source://saxerator//lib/saxerator/builder/hash_builder.rb#6
  def initialize(config, name, attributes); end

  # source://saxerator//lib/saxerator/builder/hash_builder.rb#13
  def add_node(node); end

  # source://saxerator//lib/saxerator/builder/hash_builder.rb#53
  def add_to_hash_element(hash, name, element); end

  # source://saxerator//lib/saxerator/builder/hash_builder.rb#65
  def block_variable; end

  # source://saxerator//lib/saxerator/builder/hash_builder.rb#76
  def generate_key(name); end

  # Returns the value of attribute name.
  #
  # source://saxerator//lib/saxerator/builder/hash_builder.rb#4
  def name; end

  # source://saxerator//lib/saxerator/builder/hash_builder.rb#72
  def normalize_attributes(attributes); end

  # source://saxerator//lib/saxerator/builder/hash_builder.rb#42
  def to_array; end

  # source://saxerator//lib/saxerator/builder/hash_builder.rb#21
  def to_hash; end

  # source://saxerator//lib/saxerator/builder/hash_builder.rb#17
  def to_s; end
end

# source://saxerator//lib/saxerator/builder/hash_element.rb#6
class Saxerator::Builder::HashElement
  # @return [HashElement] a new instance of HashElement
  #
  # source://saxerator//lib/saxerator/builder/hash_element.rb#10
  def initialize(name = T.unsafe(nil), attributes = T.unsafe(nil)); end

  # Returns the value of attribute attributes.
  #
  # source://saxerator//lib/saxerator/builder/hash_element.rb#7
  def attributes; end

  # Sets the attribute attributes
  #
  # @param value the value to set the attribute attributes to.
  #
  # source://saxerator//lib/saxerator/builder/hash_element.rb#7
  def attributes=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://saxerator//lib/saxerator/builder/hash_element.rb#8
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://saxerator//lib/saxerator/builder/hash_element.rb#8
  def name=(_arg0); end

  # source://saxerator//lib/saxerator/builder/hash_element.rb#16
  def to_a; end

  # source://saxerator//lib/saxerator/builder/hash_element.rb#20
  def to_h; end
end

# source://saxerator//lib/saxerator/builder/string_element.rb#6
class Saxerator::Builder::StringElement
  # @return [StringElement] a new instance of StringElement
  #
  # source://saxerator//lib/saxerator/builder/string_element.rb#10
  def initialize(str, name = T.unsafe(nil), attributes = T.unsafe(nil)); end

  # Returns the value of attribute attributes.
  #
  # source://saxerator//lib/saxerator/builder/string_element.rb#7
  def attributes; end

  # Sets the attribute attributes
  #
  # @param value the value to set the attribute attributes to.
  #
  # source://saxerator//lib/saxerator/builder/string_element.rb#7
  def attributes=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://saxerator//lib/saxerator/builder/string_element.rb#8
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://saxerator//lib/saxerator/builder/string_element.rb#8
  def name=(_arg0); end

  # source://saxerator//lib/saxerator/builder/string_element.rb#16
  def to_a; end
end

# source://saxerator//lib/saxerator/builder/xml_builder.rb#5
class Saxerator::Builder::XmlBuilder
  # @return [XmlBuilder] a new instance of XmlBuilder
  #
  # source://saxerator//lib/saxerator/builder/xml_builder.rb#8
  def initialize(config, name, attributes); end

  # source://saxerator//lib/saxerator/builder/xml_builder.rb#16
  def add_node(node); end

  # source://saxerator//lib/saxerator/builder/xml_builder.rb#32
  def block_variable; end

  # Returns the value of attribute name.
  #
  # source://saxerator//lib/saxerator/builder/xml_builder.rb#6
  def name; end

  # source://saxerator//lib/saxerator/builder/xml_builder.rb#21
  def to_xml(builder); end
end

# source://saxerator//lib/saxerator/configuration.rb#2
class Saxerator::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://saxerator//lib/saxerator/configuration.rb#8
  def initialize; end

  # source://saxerator//lib/saxerator/configuration.rb#22
  def adapter; end

  # source://saxerator//lib/saxerator/configuration.rb#15
  def adapter=(name); end

  # source://saxerator//lib/saxerator/configuration.rb#37
  def generate_key_for(val); end

  # source://saxerator//lib/saxerator/configuration.rb#45
  def hash_key_generator; end

  # Sets the attribute hash_key_generator
  #
  # @param value the value to set the attribute hash_key_generator to.
  #
  # source://saxerator//lib/saxerator/configuration.rb#3
  def hash_key_generator=(_arg0); end

  # source://saxerator//lib/saxerator/configuration.rb#41
  def hash_key_normalizer; end

  # source://saxerator//lib/saxerator/configuration.rb#66
  def ignore_namespaces!; end

  # @return [Boolean]
  #
  # source://saxerator//lib/saxerator/configuration.rb#62
  def ignore_namespaces?; end

  # Returns the value of attribute output_type.
  #
  # source://saxerator//lib/saxerator/configuration.rb#33
  def output_type; end

  # @raise [ArgumentError]
  #
  # source://saxerator//lib/saxerator/configuration.rb#27
  def output_type=(val); end

  # source://saxerator//lib/saxerator/configuration.rb#70
  def put_attributes_in_hash!; end

  # @return [Boolean]
  #
  # source://saxerator//lib/saxerator/configuration.rb#75
  def put_attributes_in_hash?; end

  # source://saxerator//lib/saxerator/configuration.rb#79
  def raise_error_if_using_put_attributes_in_hash_with_xml; end

  # source://saxerator//lib/saxerator/configuration.rb#53
  def strip_namespaces!(*namespaces); end

  # source://saxerator//lib/saxerator/configuration.rb#49
  def symbolize_keys!; end
end

# source://saxerator//lib/saxerator/configuration.rb#6
Saxerator::Configuration::ADAPTER_TYPES = T.let(T.unsafe(nil), Array)

# source://saxerator//lib/saxerator/dsl.rb#2
module Saxerator::DSL
  # source://saxerator//lib/saxerator/dsl.rb#12
  def at_depth(depth); end

  # source://saxerator//lib/saxerator/dsl.rb#20
  def child_of(tag); end

  # source://saxerator//lib/saxerator/dsl.rb#3
  def for_tag(*tags); end

  # @raise [ArgumentError]
  #
  # source://saxerator//lib/saxerator/dsl.rb#7
  def for_tags(tags); end

  # source://saxerator//lib/saxerator/dsl.rb#24
  def with_attribute(name, value = T.unsafe(nil)); end

  # source://saxerator//lib/saxerator/dsl.rb#28
  def with_attributes(attrs); end

  # source://saxerator//lib/saxerator/dsl.rb#16
  def within(tag); end

  private

  # source://saxerator//lib/saxerator/dsl.rb#41
  def specify(predicate); end
end

# source://saxerator//lib/saxerator/document_fragment.rb#2
class Saxerator::DocumentFragment
  include ::Enumerable
  include ::Saxerator::DSL

  # @return [DocumentFragment] a new instance of DocumentFragment
  #
  # source://saxerator//lib/saxerator/document_fragment.rb#6
  def initialize(source, config = T.unsafe(nil), latches = T.unsafe(nil)); end

  # source://saxerator//lib/saxerator/document_fragment.rb#12
  def each(&block); end
end

# source://saxerator//lib/saxerator/full_document.rb#2
class Saxerator::FullDocument
  include ::Saxerator::DSL

  # @return [FullDocument] a new instance of FullDocument
  #
  # source://saxerator//lib/saxerator/full_document.rb#5
  def initialize(source, config); end

  # source://saxerator//lib/saxerator/full_document.rb#11
  def all; end
end

# source://saxerator//lib/saxerator/latches/abstract_latch.rb#2
module Saxerator::Latches; end

# source://saxerator//lib/saxerator/latches/abstract_latch.rb#3
class Saxerator::Latches::AbstractLatch < ::Saxerator::SaxHandler
  # source://saxerator//lib/saxerator/latches/abstract_latch.rb#8
  def close; end

  # source://saxerator//lib/saxerator/latches/abstract_latch.rb#4
  def open; end

  # @return [Boolean]
  #
  # source://saxerator//lib/saxerator/latches/abstract_latch.rb#12
  def open?; end
end

# source://saxerator//lib/saxerator/latches/at_depth.rb#3
class Saxerator::Latches::AtDepth < ::Saxerator::SaxHandler
  # @return [AtDepth] a new instance of AtDepth
  #
  # source://saxerator//lib/saxerator/latches/at_depth.rb#4
  def initialize(depth); end

  # source://saxerator//lib/saxerator/latches/at_depth.rb#13
  def end_element(_); end

  # @return [Boolean]
  #
  # source://saxerator//lib/saxerator/latches/at_depth.rb#17
  def open?; end

  # source://saxerator//lib/saxerator/latches/at_depth.rb#9
  def start_element(_, __); end
end

# source://saxerator//lib/saxerator/latches/child_of.rb#3
class Saxerator::Latches::ChildOf < ::Saxerator::SaxHandler
  # @return [ChildOf] a new instance of ChildOf
  #
  # source://saxerator//lib/saxerator/latches/child_of.rb#4
  def initialize(name); end

  # source://saxerator//lib/saxerator/latches/child_of.rb#28
  def depth_within_element; end

  # source://saxerator//lib/saxerator/latches/child_of.rb#14
  def end_element(_); end

  # source://saxerator//lib/saxerator/latches/child_of.rb#24
  def increment_depth(amount); end

  # @return [Boolean]
  #
  # source://saxerator//lib/saxerator/latches/child_of.rb#20
  def open?; end

  # source://saxerator//lib/saxerator/latches/child_of.rb#9
  def start_element(name, _); end
end

# source://saxerator//lib/saxerator/latches/for_tags.rb#5
class Saxerator::Latches::ForTags < ::Saxerator::Latches::AbstractLatch
  # @return [ForTags] a new instance of ForTags
  #
  # source://saxerator//lib/saxerator/latches/for_tags.rb#6
  def initialize(names); end

  # source://saxerator//lib/saxerator/latches/for_tags.rb#14
  def end_element(name); end

  # source://saxerator//lib/saxerator/latches/for_tags.rb#10
  def start_element(name, _); end
end

# source://saxerator//lib/saxerator/latches/with_attributes.rb#5
class Saxerator::Latches::WithAttributes < ::Saxerator::Latches::AbstractLatch
  # @return [WithAttributes] a new instance of WithAttributes
  #
  # source://saxerator//lib/saxerator/latches/with_attributes.rb#6
  def initialize(attrs); end

  # source://saxerator//lib/saxerator/latches/with_attributes.rb#19
  def end_element(_); end

  # source://saxerator//lib/saxerator/latches/with_attributes.rb#10
  def start_element(_, attributes); end
end

# source://saxerator//lib/saxerator/latches/within.rb#3
class Saxerator::Latches::Within < ::Saxerator::SaxHandler
  # @return [Within] a new instance of Within
  #
  # source://saxerator//lib/saxerator/latches/within.rb#4
  def initialize(name); end

  # source://saxerator//lib/saxerator/latches/within.rb#13
  def end_element(_); end

  # @return [Boolean]
  #
  # source://saxerator//lib/saxerator/latches/within.rb#17
  def open?; end

  # source://saxerator//lib/saxerator/latches/within.rb#9
  def start_element(name, _); end
end

# source://saxerator//lib/saxerator.rb#26
class Saxerator::ParseException < ::StandardError; end

# source://saxerator//lib/saxerator/parser/accumulator.rb#2
module Saxerator::Parser; end

# source://saxerator//lib/saxerator/parser/accumulator.rb#3
class Saxerator::Parser::Accumulator < ::Saxerator::SaxHandler
  # @return [Accumulator] a new instance of Accumulator
  #
  # source://saxerator//lib/saxerator/parser/accumulator.rb#4
  def initialize(config, block); end

  # @return [Boolean]
  #
  # source://saxerator//lib/saxerator/parser/accumulator.rb#27
  def accumulating?; end

  # source://saxerator//lib/saxerator/parser/accumulator.rb#23
  def characters(string); end

  # source://saxerator//lib/saxerator/parser/accumulator.rb#14
  def end_element(_); end

  # source://saxerator//lib/saxerator/parser/accumulator.rb#10
  def start_element(name, attrs = T.unsafe(nil)); end
end

# source://saxerator//lib/saxerator/parser/latched_accumulator.rb#3
class Saxerator::Parser::LatchedAccumulator < ::Saxerator::SaxHandler
  # @return [LatchedAccumulator] a new instance of LatchedAccumulator
  #
  # source://saxerator//lib/saxerator/parser/latched_accumulator.rb#4
  def initialize(config, latches, block); end

  # source://saxerator//lib/saxerator/parser/latched_accumulator.rb#23
  def characters(string); end

  # source://saxerator//lib/saxerator/parser/latched_accumulator.rb#10
  def check_latches_and_passthrough(method, *args); end

  # source://saxerator//lib/saxerator/parser/latched_accumulator.rb#19
  def end_element(name); end

  # @return [Boolean]
  #
  # source://saxerator//lib/saxerator/parser/latched_accumulator.rb#27
  def ignore_namespaces?; end

  # source://saxerator//lib/saxerator/parser/latched_accumulator.rb#15
  def start_element(name, attrs = T.unsafe(nil)); end
end

# source://saxerator//lib/saxerator/sax_handler.rb#2
class Saxerator::SaxHandler
  # source://saxerator//lib/saxerator/sax_handler.rb#3
  def characters(_text); end

  # source://saxerator//lib/saxerator/sax_handler.rb#7
  def end_element(_name); end

  # source://saxerator//lib/saxerator/sax_handler.rb#5
  def start_element(_name, _attrs = T.unsafe(nil)); end
end

# source://saxerator//lib/saxerator/version.rb#2
Saxerator::VERSION = T.let(T.unsafe(nil), String)
